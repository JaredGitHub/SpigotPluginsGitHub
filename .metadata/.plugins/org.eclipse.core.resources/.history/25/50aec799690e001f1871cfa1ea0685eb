package me.Jared;

import java.util.HashMap;
import java.util.UUID;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.ArmorStand;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.entity.Zombie;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityDeathEvent;
import org.bukkit.event.entity.PlayerDeathEvent;
import org.bukkit.event.entity.ProjectileHitEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryType;
import org.bukkit.event.player.AsyncPlayerChatEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.inventory.InventoryHolder;
import org.bukkit.permissions.PermissionAttachment;

import me.Jared.MenuSystem.StatsMenu;
import me.Jared.Ranks.Rank;
import net.md_5.bungee.api.ChatMessageType;
import net.md_5.bungee.api.chat.TextComponent;


public class EventListener implements Listener
{
	private Stats stats = Stats.getPlugin(Stats.class);
	FileConfiguration config = stats.getConfig();

	private HashMap<UUID, Long> cooldown = new HashMap<UUID, Long>();
	private int cooldowntime = 3*1000;

	@EventHandler
	public void onEntityDamageByEntity(ProjectileHitEvent e)
	{
		if(e.getEntity().getShooter() instanceof Player)
		{
			Player player = (Player) e.getEntity().getShooter();

			if(e.getHitEntity() instanceof LivingEntity && !(e.getHitEntity() instanceof ArmorStand))
			{
				LivingEntity playerHit = (LivingEntity) e.getHitEntity();
				String name = ChatColor.YELLOW + playerHit.getName() + " ";
				Bukkit.getScheduler().runTaskLater(stats, new Runnable()
				{
					@Override
					public void run()
					{
						int health = (int)playerHit.getHealth() - (int)playerHit.getLastDamage();
						switch(health)
						{
						case 0:
							sendActionBar(player, name + ChatColor.BLACK + "❤❤❤❤❤❤❤❤❤❤");
							break;
						case 1:
							sendActionBar(player, name + ChatColor.RED + "❤"+ ChatColor.BLACK + "❤❤❤❤❤❤❤❤❤");
							break;
						case 2:
							sendActionBar(player,name + ChatColor.DARK_RED + "❤"+ ChatColor.BLACK + "❤❤❤❤❤❤❤❤❤");
							break;
						case 3:
							sendActionBar(player,name + ChatColor.DARK_RED + "❤" +ChatColor.RED + "❤"+ ChatColor.BLACK + "❤❤❤❤❤❤❤❤");
							break;
						case 4:
							sendActionBar(player,name + ChatColor.DARK_RED + "❤❤"+ ChatColor.BLACK + "❤❤❤❤❤❤❤❤");
							break;
						case 5:
							sendActionBar(player,name + ChatColor.DARK_RED + "❤❤" +ChatColor.RED + "❤"+ ChatColor.BLACK + "❤❤❤❤❤❤❤");
							break;
						case 6:
							sendActionBar(player,name + ChatColor.DARK_RED + "❤❤❤" + ChatColor.BLACK + "❤❤❤❤❤❤❤");
							break;
						case 7:
							sendActionBar(player,name + ChatColor.DARK_RED + "❤❤❤" + ChatColor.RED + "❤" + ChatColor.BLACK + "❤❤❤❤❤❤");
							break;
						case 8:
							sendActionBar(player,name + ChatColor.DARK_RED + "❤❤❤❤" + ChatColor.BLACK + "❤❤❤❤❤❤");
							break;
						case 9:
							sendActionBar(player,name + ChatColor.DARK_RED + "❤❤❤❤" + ChatColor.RED + "❤" + ChatColor.BLACK + "❤❤❤❤❤");
							break;
						case 10:
							sendActionBar(player,name + ChatColor.DARK_RED + "❤❤❤❤❤" + ChatColor.BLACK + "❤❤❤❤❤");
							break;
						case 11:
							sendActionBar(player,name + ChatColor.DARK_RED + "❤❤❤❤❤" + ChatColor.RED + "❤" + ChatColor.BLACK + "❤❤❤❤");
							break;
						case 12:
							sendActionBar(player,name + ChatColor.DARK_RED + "❤❤❤❤❤❤" + ChatColor.BLACK + "❤❤❤❤");
							break;
						case 13:
							sendActionBar(player,name + ChatColor.DARK_RED + "❤❤❤❤❤❤" + ChatColor.RED + "❤" + ChatColor.BLACK + "❤❤❤");
							break;
						case 14:
							sendActionBar(player,name + ChatColor.DARK_RED + "❤❤❤❤❤❤❤" + ChatColor.BLACK + "❤❤❤");
							break;
						case 15:
							sendActionBar(player,name + ChatColor.DARK_RED + "❤❤❤❤❤❤❤" + ChatColor.RED + "❤" + ChatColor.BLACK + "❤❤");
							break;
						case 16:
							sendActionBar(player,name + ChatColor.DARK_RED + "❤❤❤❤❤❤❤❤" + ChatColor.BLACK + "❤❤");
							break;
						case 17:
							sendActionBar(player,name + ChatColor.DARK_RED + "❤❤❤❤❤❤❤❤" + ChatColor.RED + "❤" + ChatColor.BLACK + "❤");
							break;
						case 18:
							sendActionBar(player,name + ChatColor.DARK_RED + "❤❤❤❤❤❤❤❤❤" + ChatColor.BLACK + "❤");
							break;
						case 19:
							sendActionBar(player,name + ChatColor.DARK_RED + "❤❤❤❤❤❤❤❤❤" + ChatColor.RED + "❤");
							break;
						case 20:
							sendActionBar(player,name + ChatColor.DARK_RED + "❤❤❤❤❤❤❤❤❤❤");
							break;
						}

					}
				}, 1);
			}
		}
	}
	@EventHandler
	public void onPlayerDeath(PlayerDeathEvent e)
	{
		e.setDeathMessage(null);
	}

	@EventHandler
	public void onDeath(EntityDeathEvent e)
	{
		if(e.getEntity() instanceof Player)
		{
			Player p = (Player) e.getEntity();

			//If the player died from getting killed by another player.
			if(p.getKiller() != null)
			{
				//If player is in cooldown STOP!!!
				if(cooldown.containsKey(p.getUniqueId()))
				{
					long timeleft = ((cooldown.get(p.getUniqueId())) + cooldowntime) - (System.currentTimeMillis());

					timeleft /= 1000.0;
					if(timeleft > 0)
					{
						return;
					}
				}

				Player killer = e.getEntity().getKiller();

				//sending action bars and messages in chat
				sendActionBar(p, ChatColor.DARK_RED + "You were killed by " + e.getEntity().getKiller().getName());
				sendActionBar(killer,ChatColor.DARK_RED + "You killed " + e.getEntity().getName() + "!!");


				int rankGems = 5;
				if(killer.hasPermission("ranks.default"))
				{
					if(Bukkit.getPluginManager().getPlugin("Boosters").getConfig().getBoolean("doublegems"))
					{
						rankGems = 10;
					}
					else
					{
						rankGems = 5;
					}
				}
				if(killer.hasPermission("ranks.vip"))
				{
					if(Bukkit.getPluginManager().getPlugin("Boosters").getConfig().getBoolean("doublegems"))
					{
						rankGems = 14;
					}
					else
					{
						rankGems = 7;
					}
				}
				if(killer.hasPermission("ranks.vipplus"))
				{
					if(Bukkit.getPluginManager().getPlugin("Boosters").getConfig().getBoolean("doublegems"))
					{
						rankGems = 20;
					}
					else
					{
						rankGems = 10;
					}
				}
				if(killer.hasPermission("ranks.mvp"))
				{
					if(Bukkit.getPluginManager().getPlugin("Boosters").getConfig().getBoolean("doublegems"))
					{
						rankGems = 30;
					}
					else
					{
						rankGems = 15;
					}
				}
				if(killer.hasPermission("ranks.mvpplus"))
				{
					if(Bukkit.getPluginManager().getPlugin("Boosters").getConfig().getBoolean("doublegems"))
					{
						rankGems = 40;
					}
					else
					{
						rankGems = 20;
					}
				}

				Bukkit.broadcastMessage(ChatColor.GOLD + "* " + ChatColor.GRAY + killer.getName() + " has eliminated " + p.getName());
				killer.sendMessage(ChatColor.GREEN + "You killed " + ChatColor.WHITE + p.getName() + ChatColor.GREEN + " and received " + rankGems + " gems!");

				// Setting the config to kills deaths killstreaks and gems
				int deaths = config.getInt(e.getEntity().getUniqueId() + "." + "deaths");
				int kills = config.getInt(e.getEntity().getKiller().getUniqueId() + "." + "kills");
				int killStreak = config.getInt(e.getEntity().getKiller().getUniqueId() + ".killStreak");
				int gems = config.getInt(p.getKiller().getUniqueId() + ".gems");

				config.set(e.getEntity().getKiller().getUniqueId() + ".gems", gems + rankGems);
				config.set(e.getEntity().getUniqueId()+ ".deaths", deaths + 1);
				config.set(e.getEntity().getKiller().getUniqueId()+".kills", kills + 1);
				config.set(e.getEntity().getKiller().getUniqueId()+".killStreak", killStreak + 1);
				config.set(e.getEntity().getUniqueId()+".killStreak", killStreak == 0);

				cooldown.put(p.getUniqueId(), System.currentTimeMillis());

				stats.saveConfig();
				new StatScoreboard(stats, p);
				new StatScoreboard(stats, killer);
			}
			else
			{
				Bukkit.getServer().broadcastMessage(ChatColor.GOLD + "* " + ChatColor.GRAY + e.getEntity().getName() + " has died");

				int deaths = config.getInt(e.getEntity().getUniqueId() + "." + "deaths");
				int killStreak = config.getInt(e.getEntity().getUniqueId() + ".killStreak");

				config.set(e.getEntity().getUniqueId() + ".killStreak", killStreak == 0);
				config.set(e.getEntity().getUniqueId()+"." + "deaths", deaths + 1);

				new StatScoreboard(stats, p);
				stats.saveConfig();

			}
		}
	}

	public void sendActionBar(Player player, String message)
	{
		player.spigot().sendMessage(ChatMessageType.ACTION_BAR, new TextComponent(message));
	}

	@EventHandler
	public void onClick(InventoryClickEvent e)
	{
		if(e.getClickedInventory() == null) return;

		InventoryHolder holder = e.getInventory().getHolder();

		if(holder instanceof StatsMenu)
		{
			StatsMenu menu = (StatsMenu) holder;
			menu.handleMenu(e);

			if(e.getWhoClicked().getOpenInventory().getBottomInventory().getType().equals(InventoryType.PLAYER))
			{
				e.setCancelled(true);
			}
			if(e.getCurrentItem() == null) return;
		}
	}

	@EventHandler
	public void onJoin(PlayerJoinEvent e)
	{
		Player player = e.getPlayer();

		if(!player.hasPlayedBefore())
		{
			stats.getRankManager().setRank(player.getUniqueId(), Rank.DEFAULT, true);
		}

		stats.getNametagManager().setNametags(player);
		stats.getNametagManager().newTag(player);

		PermissionAttachment attachment;
		if(stats.getRankManager().getPerms().containsKey(player.getUniqueId()))
		{
			attachment = stats.getRankManager().getPerms().get(player.getUniqueId());
		}
		else
		{
			attachment = player.addAttachment(stats);
			stats.getRankManager().getPerms().put(player.getUniqueId(), attachment);
		}

		for(String perm : stats.getRankManager().getRank(player.getUniqueId()).getPermissions())
		{
			attachment.setPermission(perm, true);
		}

		new StatScoreboard(stats, player);
	}

	@EventHandler
	public void onQuit(PlayerQuitEvent e)
	{
		Player p = e.getPlayer();

		stats.getNametagManager().removeTag(p);
	}

	@EventHandler
	public void onChat(AsyncPlayerChatEvent e)
	{
		e.setCancelled(true);

		Player player = e.getPlayer();
		Bukkit.broadcastMessage(stats.getRankManager().getRank(player.getUniqueId()).getDisplay() + ChatColor.RESET + player.getName() + ": " + e.getMessage());
	}
}

