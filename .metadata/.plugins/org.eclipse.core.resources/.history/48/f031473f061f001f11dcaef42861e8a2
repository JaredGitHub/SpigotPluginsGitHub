package me.Jared.Commands;

import java.util.ArrayList;
import java.util.List;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Sound;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.command.TabCompleter;
import org.bukkit.entity.Player;

import me.Jared.GameState;
import me.Jared.Manager.ConfigManager;
import me.Jared.Manager.GameManager;

public class EventCommands implements CommandExecutor, TabCompleter
{

	private GameManager gameManager;

	public EventCommands(GameManager gameManager)
	{
		this.gameManager = gameManager;
	}

	@Override
	public List<String> onTabComplete(CommandSender sender, Command cmd, String str, String[] args)
	{
		ArrayList<String> list = new ArrayList<String>();

		if(cmd.getName().equalsIgnoreCase("event"))
		{
			if(sender instanceof Player)
			{
				Player player = (Player) sender;
				if(player.hasPermission("event"))
				{
					list.add("setlobby");
					list.add("set");
					list.add("setcountdown");
					list.add("activate");
					list.add("deactivate");
					list.add("help");
					list.add("status");
				}
			}
		}
		return list;
	}

	@Override
	public boolean onCommand(CommandSender sender, Command cmd, String str, String[] args)
	{
		if(cmd.getName().equalsIgnoreCase("event"))
		{
			if(sender instanceof Player)
			{
				Player player = (Player) sender;
				if(!player.hasPermission("event")) 
				{
					if(args.length == 1)
					{
						if(args[0].equalsIgnoreCase("leave"))
						{

							player.sendMessage(ChatColor.RED + "No Permission!"); 
							return true;
						}
					}
					else if(gameManager.getGameState() != GameState.INACTIVE)
					{
						player.teleport(ConfigManager.getLobbySpawn());
						gameManager.getPlayerManager().setPlayerInGame(player);
					}
				}

				if(args.length == 0)
				{
					if(gameManager.getGameState() != GameState.INACTIVE)
					{
						player.sendMessage(ChatColor.RED + "Type /event help!");
					}
					player.sendMessage(ChatColor.RED + "Type /event activate to activate event mode!");
					return true;
				}

				if(args.length == 1)
				{
					if(gameManager.getGameState() == GameState.INACTIVE)
					{
						if(args[0].equalsIgnoreCase("activate"))
						{
							for(Player online : Bukkit.getOnlinePlayers())
							{
								online.teleport(ConfigManager.getLobbySpawn());
							}
							
							player.sendMessage(ChatColor.GREEN + "Set event mode to active!");
							player.playSound(player.getLocation(), Sound.ENTITY_PLAYER_LEVELUP, 1, 1);
							gameManager.setGameState(GameState.RECRUITING);
							return true;
						}
					}

					else if(gameManager.getGameState() == GameState.RECRUITING)
					{
						if(args[0].equalsIgnoreCase("start"))
						{
							if(ConfigManager.getTeams().size() <= 1)
							{
								player.sendMessage(ChatColor.RED + "Not enough teams yet!");
								return true;
							}
							else
							{
								player.sendMessage(ChatColor.GREEN + "Event is now starting!");
								player.playSound(player.getLocation(), Sound.ENTITY_PLAYER_LEVELUP, 1, 1);
								gameManager.setGameState(GameState.COUNTDOWN);
							}
						}
					}

					if(args[0].equalsIgnoreCase("status"))
					{
						player.sendMessage(ChatColor.WHITE + "Current status of the event is " + ChatColor.GOLD + gameManager.getGameState().toString());
					}

					if(args[0].equalsIgnoreCase("deactivate"))
					{
						player.sendMessage(ChatColor.RED + "Set event mode to inactive!");
						for(Player online : Bukkit.getOnlinePlayers())
						{
							online.teleport(Bukkit.getWorld("world").getSpawnLocation());
						}
						player.playSound(player.getLocation(), Sound.ENTITY_GHAST_DEATH, 1, 1);
						gameManager.setGameState(GameState.INACTIVE);
						return true;
					}

					if(args[0].equalsIgnoreCase("help"))
					{
						player.sendMessage(ChatColor.GRAY + "------------" + ChatColor.GOLD + "Event Help" + ChatColor.GRAY + "------------");
						player.sendMessage(ChatColor.GOLD + "- " + ChatColor.GRAY + "/event setlobby" + ChatColor.WHITE + " - Sets the lobby of the event to where you are standing");
						player.sendMessage(ChatColor.GOLD + "- " + ChatColor.GRAY + "/event set <1 or 2>" + ChatColor.WHITE + " - Sets the spawn for team 1 and team 2");
						return true;
					}
					else if(args[0].equalsIgnoreCase("setlobby"))
					{
						ConfigManager.setLobbySpawn(player.getLocation());
						player.sendMessage(ChatColor.GREEN + "You have successfully set event lobby to your location!");
						player.playSound(player.getLocation(), Sound.ENTITY_PLAYER_LEVELUP, 1, 1);
					}
					else if(args[0].equalsIgnoreCase("set"))
					{
						player.sendMessage(ChatColor.RED + "Usage: /event set <1 or 2>");
					}
				}
				else if(args.length == 2)
				{
					if(args[0].equalsIgnoreCase("set"))
					{
						if(args[1].equalsIgnoreCase("1"))
						{
							ConfigManager.setEventSpawn(player.getLocation(), 1);
							player.sendMessage(ChatColor.GREEN + "You have successfully set event spawn 1 to your location!");
							player.playSound(player.getLocation(), Sound.ENTITY_PLAYER_LEVELUP, 1, 1);
						}
						else if(args[1].equalsIgnoreCase("2"))
						{
							ConfigManager.setEventSpawn(player.getLocation(), 2);
							player.sendMessage(ChatColor.GREEN + "You have successfully set event spawn 2 to your location!");
							player.playSound(player.getLocation(), Sound.ENTITY_PLAYER_LEVELUP, 1, 1);
						}
						else
						{
							player.sendMessage(ChatColor.RED + "Usage: /event set <1 or 2>");
						}
						return true;
					}
					else if(args[0].equalsIgnoreCase("setcountdown"))
					{
						int num = Integer.parseInt(args[1]);
						ConfigManager.setCountdown(num);
						player.sendMessage(ChatColor.GREEN + "You have successfully set countdown to " + num + " seconds!");
						player.playSound(player.getLocation(), Sound.ENTITY_PLAYER_LEVELUP, 1, 1);
					}
				}
			}
			else
			{
				sender.sendMessage(ChatColor.RED + "No sir!");
			}
		}
		return true;
	}

}
